<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JARVIS Voice Control</title>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #1a1a1a;
            color: #ffffff;
        }
        .container {
            background-color: #2d2d2d;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
        h1 {
            color: #00a8ff;
            text-align: center;
            margin-bottom: 30px;
        }
        .voice-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .voice-card {
            background-color: #3d3d3d;
            padding: 15px;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s;
        }
        .voice-card:hover {
            transform: translateY(-2px);
            background-color: #4d4d4d;
        }
        .voice-card.active {
            border: 2px solid #00a8ff;
        }
        .voice-name {
            font-size: 1.1em;
            margin-bottom: 10px;
            color: #00a8ff;
        }
        .voice-info {
            font-size: 0.9em;
            color: #cccccc;
        }
        .controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }
        button {
            background-color: #00a8ff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        button:hover {
            background-color: #0088cc;
        }
        button:disabled {
            background-color: #666;
            cursor: not-allowed;
        }
        .rate-control {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        input[type="range"] {
            width: 200px;
        }
        .rate-value {
            min-width: 60px;
            text-align: center;
        }
        .test-area {
            margin-top: 20px;
            text-align: center;
        }
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #3d3d3d;
            color: white;
            border: 1px solid #666;
            border-radius: 5px;
        }
        .status {
            margin-top: 20px;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }
        .success {
            background-color: #28a745;
        }
        .error {
            background-color: #dc3545;
        }
        .nav-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px;
            background-color: #1a1a1a;
            border-radius: 5px;
        }
        .nav-bar a {
            color: #00a8ff;
            text-decoration: none;
            padding: 5px 10px;
        }
        .nav-bar a:hover {
            text-decoration: underline;
        }
        .loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .loading-content {
            color: white;
            text-align: center;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #00a8ff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="nav-bar">
            <a href="/">‚Üê Back to JARVIS</a>
            <span>Voice Control Panel</span>
            <a href="/voice_control">Refresh</a>
        </div>

        <h1>JARVIS Voice Control</h1>
        
        <div class="controls">
            <button onclick="previousVoice()">Previous Voice</button>
            <button onclick="nextVoice()">Next Voice</button>
            <button onclick="refreshVoices()">Refresh Voices</button>
        </div>

        <div class="rate-control">
            <span>Speech Rate:</span>
            <input type="range" id="rateSlider" min="100" max="300" value="180" step="10">
            <span class="rate-value" id="rateValue">180 WPM</span>
        </div>

        <div class="voice-controls" id="voiceList">
            <!-- Voice cards will be inserted here -->
        </div>

        <div class="test-area">
            <textarea id="testText" rows="3" placeholder="Enter text to test the selected voice...">Hello, I am JARVIS. How can I assist you today?</textarea>
            <button onclick="testVoice()">Test Voice</button>
        </div>

        <div id="status" class="status" style="display: none;"></div>
    </div>

    <div id="loading" class="loading" style="display: none;">
        <div class="loading-content">
            <div class="spinner"></div>
            <div id="loadingText">Loading...</div>
        </div>
    </div>

    <script>
        let currentVoice = null;
        let isLoading = false;

        function showLoading(message = 'Loading...') {
            document.getElementById('loadingText').textContent = message;
            document.getElementById('loading').style.display = 'flex';
            isLoading = true;
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
            isLoading = false;
        }

        async function loadVoices() {
            if (isLoading) return;
            showLoading('Loading voices...');
            
            try {
                const response = await fetch('/voices');
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                const data = await response.json();
                if (data.error) throw new Error(data.error);

                const voiceList = document.getElementById('voiceList');
                voiceList.innerHTML = '';

                if (!data.voices || data.voices.length === 0) {
                    voiceList.innerHTML = '<div class="voice-card"><div class="voice-name">No voices found</div></div>';
                    return;
                }

                data.voices.forEach(voice => {
                    const card = document.createElement('div');
                    card.className = 'voice-card' + (data.current_voice?.id === voice.id ? ' active' : '');
                    card.onclick = () => selectVoice(voice.id);
                    card.innerHTML = `
                        <div class="voice-name">${voice.name}</div>
                        <div class="voice-info">ID: ${voice.id}</div>
                    `;
                    voiceList.appendChild(card);
                });

                currentVoice = data.current_voice;
                
                // Update rate slider to match current voice
                if (data.current_voice && data.current_voice.rate) {
                    document.getElementById('rateSlider').value = data.current_voice.rate;
                    document.getElementById('rateValue').textContent = data.current_voice.rate + ' WPM';
                }
            } catch (error) {
                showStatus('Failed to load voices: ' + error.message, false);
            } finally {
                hideLoading();
            }
        }

        async function selectVoice(voiceId) {
            if (isLoading) return;
            showLoading('Changing voice...');
            
            try {
                const response = await fetch('/voice', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ voice_id: voiceId })
                });
                
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                const data = await response.json();
                if (data.error) throw new Error(data.error);
                
                if (data.success) {
                    currentVoice = data.current_voice;
                    updateVoiceCards();
                    showStatus('Voice changed successfully!', true);
                    
                    // Test the new voice
                    testVoice('Voice changed successfully.');
                } else {
                    throw new Error('Failed to change voice');
                }
            } catch (error) {
                showStatus('Error changing voice: ' + error.message, false);
            } finally {
                hideLoading();
            }
        }

        let rateUpdateTimeout = null;
        async function setRate(rate) {
            if (rateUpdateTimeout) {
                clearTimeout(rateUpdateTimeout);
            }
            
            rateUpdateTimeout = setTimeout(async () => {
                try {
                    const response = await fetch('/rate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ rate: rate })
                    });
                    
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    
                    const data = await response.json();
                    if (data.error) throw new Error(data.error);
                    
                    if (data.success) {
                        showStatus('Speech rate updated!', true);
                    } else {
                        throw new Error('Failed to update speech rate');
                    }
                } catch (error) {
                    showStatus('Error updating speech rate: ' + error.message, false);
                }
            }, 300); // Debounce rate updates
        }

        async function testVoice(defaultText = null) {
            if (isLoading) return;
            showLoading('Testing voice...');
            
            try {
                const text = defaultText || document.getElementById('testText').value;
                const response = await fetch('/send_text', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ text: text })
                });
                
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                const data = await response.json();
                if (data.error) throw new Error(data.error);
                
                if (data.success) {
                    showStatus('Test successful!', true);
                } else {
                    throw new Error(data.error || 'Test failed');
                }
            } catch (error) {
                showStatus('Error testing voice: ' + error.message, false);
            } finally {
                hideLoading();
            }
        }

        function updateVoiceCards() {
            const cards = document.querySelectorAll('.voice-card');
            cards.forEach(card => {
                const voiceId = card.querySelector('.voice-info').textContent.split('ID: ')[1];
                card.className = 'voice-card' + (currentVoice?.id === voiceId ? ' active' : '');
            });
        }

        function showStatus(message, success) {
            const status = document.getElementById('status');
            status.textContent = message;
            status.className = 'status ' + (success ? 'success' : 'error');
            status.style.display = 'block';
            setTimeout(() => {
                status.style.display = 'none';
            }, 3000);
        }

        async function nextVoice() {
            if (isLoading) return;
            showLoading('Switching to next voice...');
            
            try {
                const response = await fetch('/send_text', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ text: 'next voice' })
                });
                await loadVoices();
            } catch (error) {
                showStatus('Error switching voice: ' + error.message, false);
            } finally {
                hideLoading();
            }
        }

        async function previousVoice() {
            if (isLoading) return;
            showLoading('Switching to previous voice...');
            
            try {
                const response = await fetch('/send_text', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ text: 'previous voice' })
                });
                await loadVoices();
            } catch (error) {
                showStatus('Error switching voice: ' + error.message, false);
            } finally {
                hideLoading();
            }
        }

        function refreshVoices() {
            loadVoices();
        }

        // Initialize rate slider
        const rateSlider = document.getElementById('rateSlider');
        const rateValue = document.getElementById('rateValue');
        rateSlider.oninput = function() {
            rateValue.textContent = this.value + ' WPM';
            setRate(parseInt(this.value));
        };

        // Load voices when page loads
        document.addEventListener('DOMContentLoaded', loadVoices);

        // Add error handling for fetch operations
        window.addEventListener('unhandledrejection', function(event) {
            showStatus('Network error: ' + event.reason, false);
        });
    </script>
</body>
</html> 
// ... existing code ...
@app.route('/camera', methods=['POST'])
def process_camera():
    """Process camera input"""
    try:
        # For now, just acknowledge the camera is active
        return jsonify({
            'success': True,
            'message': 'Camera is active'
        })
    except Exception as e:
        print(f"Error processing camera input: {str(e)}")
        return jsonify({'error': 'Failed to process camera input'}), 500

// ... existing code ...
// ... existing code ...
        <div class="flex items-center justify-center space-x-4">
            <button id="micButton" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full flex items-center">
                <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
                </svg>
                <span>Hold to Speak</span>
            </button>

            <button id="cameraButton" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full flex items-center">
                <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                <span>Camera</span>
            </button>
            
            <div class="flex-1 max-w-2xl">
                <input type="text" id="textInput" class="w-full bg-gray-700 text-white rounded-l px-4 py-3 focus:outline-none" placeholder="Type your message...">
            </div>
// ... existing code ...

        // Camera handling
        const cameraButton = document.getElementById('cameraButton');
        let videoStream = null;
        let videoElement = null;

        cameraButton.addEventListener('click', async () => {
            try {
                if (!videoElement) {
                    // Create video element if it doesn't exist
                    videoElement = document.createElement('video');
                    videoElement.className = 'fixed top-0 left-0 w-full h-full object-cover z-50';
                    videoElement.autoplay = true;
                    document.body.appendChild(videoElement);

                    // Add close button
                    const closeButton = document.createElement('button');
                    closeButton.className = 'fixed top-4 right-4 bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-full z-50';
                    closeButton.innerHTML = '‚úï';
                    closeButton.onclick = () => {
                        if (videoStream) {
                            videoStream.getTracks().forEach(track => track.stop());
                        }
                        videoElement.remove();
                        closeButton.remove();
                        videoElement = null;
                        videoStream = null;
                    };
                    document.body.appendChild(closeButton);
                }

                if (!videoStream) {
                    // Start camera
                    videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
                    videoElement.srcObject = videoStream;
                    status.textContent = 'Camera active';
                }
            } catch (error) {
                console.error('Error:', error);
                status.textContent = 'Error accessing camera';
            }
        });
